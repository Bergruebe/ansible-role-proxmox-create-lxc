---
# proxmox_create_lxc: creation of a complete LXC container uin porxmox cluster
# tasks file for ansible-role-proxmox-create-lxc/

# Extraer el hostname del inventory_hostname (debe ser el fqdn)
- name: Extract hostname from inventory_hostname (must be fqdn)
  set_fact:
    proxmox_hostname: "{{ inventory_hostname.split('.')[0] }}"

- debug:
    msg: "{{ proxmox_hostname }} - {{inventory_hostname}}"
    verbosity: 2

# Verificar si python-pip está instalado en el nodo proxmox
- name: Verify that python-pip is installed in the Proxmox node
  apt:
    name: python-pip
    state: present
  delegate_to: "{{ api_host }}"

#  Verificar si el módulo proxmoxer de python está instalado
- name: Verify if proxmoxer pip module is installed
  pip:
    name: proxmoxer
    state: present
  delegate_to: "{{ api_host }}"

# Descargar la plantilla del contenedor
- name: Download the container template
  get_url:
    url: "{{ url_ostemplate }}"
    dest: /var/lib/vz/template/cache/
  delegate_to: "{{ api_host }}"
  register: descarga_ostemplate
  tags:
    - descarga
    - download

- debug:
    var: descarga_ostemplate
    verbosity: 2
  tags:
    - descarga
    - download

# Agregar template lxc del container al nodo
- name: Add LXC container template to node
  proxmox_template:
      node: "{{ node }}"
      api_user: "{{ api_user }}"
      api_host: "{{ api_host }}"
      api_password: "{{node_deploy_password}}"
      src: "{{ descarga_ostemplate.dest }}"
      content_type: vztmpl
      state: present
  delegate_to: "{{ api_host }}"
  tags:
      - descarga
      - download

# Creando el container
- name: Create the container
  proxmox:
    node: "{{ node }}"
    api_user: "{{ api_user }}"
    api_host: "{{ api_host }}"
    api_password: "{{ node_deploy_password }}"
    cores: "{{ cores }}"
    memory: "{{ memory }}"
    storage: "{{ storage }}"
    disk: "{{ disk }}"
    hostname: "{{ proxmox_hostname }}"
    mounts: >-
      {  {%- for item in mounts -%}
            "{{ item.id }}":"{{ item.storage|default('local-lvm') }}:{{ item.size|default(32) }},mp={{ item.mount_point|default('/mnt/mp0') }},{% if item.acl is defined %}{% if (item.acl) %}acl=1{% else %}acl=0{% endif %},{% endif %}{% if item.quota is defined and item.quota %}quota=1,{% endif %}{% if item.read_only is defined and item.read_only %}ro=1,{% endif %}{% if item.backup is defined and item.backup %}backup=1,{% endif %}{% if item.skip_replication is defined and item.skip_replication %}replicate=0{% endif %}",
          {%- endfor -%}  }
    netif:
      net0: "name={{ netif_name }},bridge={{ netif_bridge }},{% if (netif_hwaddr is defined) %},hwaddr={{ netif_hwaddr }}{% endif %},ip={{ netif_ip4 }}/{{ netif_netmask }}{% if (netif_gw is defined) %},gw={{ netif_gw }}{% endif %}{% if (netif_ip6 is defined) %},ip6={{ netif_ip6 }}/{{ netif_netmask6 }}{% endif %}{% if (netif_ip6 is defined) and (netif_gw6 is defined) %},gw6={{ netif_gw6 }}{% endif %},{% if (netif_firewall is defined and netif_firewall) %}firewall=1{% endif %}"
    nameserver: "{{ nameserver }}"
    ostemplate: "local:vztmpl/{{ url_ostemplate | urlsplit('path') | basename }}"
    password: "{{ root_password }}"
    pubkey: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    onboot: "{{ onboot }}"
  delegate_to: "{{ api_host }}"
  register: container

# Mirá el número de la VM
- name: Show the ID of the VM
  debug:
    var: container

# Extraer el número de VM
- name: Extract the ID of the VM from container var
  shell: pct list | grep -w "{{ proxmox_hostname }}" | cut -f 1 -d ' '
  delegate_to: "{{ api_host }}"
  register: VMID
  when: container is succeeded
  changed_when: false
  tags:
    - deploy

- debug:
    var: VMID
  tags:
    - deploy

# Arrancar el contenedor
- name: Turn on the container
  proxmox:
    node: "{{ node }}"
    api_user: "{{ api_user }}"
    api_host: "{{ api_host }}"
    api_password: "{{ node_deploy_password }}"
    vmid: "{{ VMID.stdout }}"
    state: started
  delegate_to: "{{ api_host }}"
  register: turned_on
  when: (container is not defined) or (container is succeeded)
  tags:
    - deploy

# Repintiendo ping cada 3s hasta que el el contenedor arranque
- name: Repeating ping every 3 seconds until the container starts
  wait_for_connection:
    delay: 3
    sleep: 3
    timeout: 30
  remote_user: root
  when: turned_on.changed
