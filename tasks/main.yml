---
# proxmox_create_lxc: creation of a complete LXC container uin porxmox cluster
# tasks file for ansible-role-proxmox-create-lxc/

# Extract hostname from inventory_hostname (must be fqdn)
- name: Extraer el hostname del inventory_hostname que es el fqdn)
  set_fact:
    proxmox_hostname: "{{ inventory_hostname.split('.')[0] }}"

- debug:
    msg: "{{ proxmox_hostname }} - {{inventory_hostname}}"
    verbosity: 2

# Verify that python-pip is installed in the proxmox node
- name: Verificar si python-pip está instalado en el nodo proxmox
  apt:
    name: python-pip
    state: present
  delegate_to: "{{ api_host }}"

# Verify if proxmoxer pip module is installed
- name: Verificar si el módulo proxmoxer de python está instalado
  pip:
    name: proxmoxer
    state: present
  delegate_to: "{{ api_host }}"


#- debug:
#    msg: "{{node_root_password}}"


- name: Crear máquina virtual KVM en el nodo proxmox idóneo.
  proxmox_kvm:
    node: "{{ node }}"
    name: "{{ proxmox_hostname }}"
    api_user: "{{ api_user }}"
    api_host: "{{ api_host }}"
    api_password: "{{node_root_password}}"
    cores: "{{ cores }}"
    memory: "{{ memory }}"
    virtio: '{"virtio0":"{{ storage }}:{{ disk }}"}'
    net: '{"net0":"virtio,bridge={{ netif_bridge }},rate=200"}'
    args: --ip={{ netif_ip4 }} --netmask={{ netif_netmask }}
          --gateway={{ netif_gw }}
          --nameserver={{ nameserver }}
          --hostname={{ proxmox_hostname }}
  register: virtualm
  delegate_to: "{{ api_host }}"



#    when:  (mounts is not defined) or ( mounts|length == 0 )


#{% if item.value.network is defined %}
#{% if ( item.value.network.ip is defined and item.value.network.netmask is defined ) %}static
#{% if item.value.network.gateway is defined %}
#{% endif %}
#{% if item.value.network.nameserver is defined %}
#{% endif %}
#{% endif %}

#	net:
#            net0: "name={{ netif_name }},  {% if (netif_hwaddr is defined) %},hwaddr={{ netif_hwaddr }}{% endif %}{% if (netif_ip6 is defined) %},ip6={{ netif_ip6 }}/{{ netif_netmask6 }}{% endif %}{% if (netif_ip6 is defined) and (gw6 is defined) %},gw6={{ netif_gw6 }}{% endif %}"




#-kernel /tmp/{{ item.value.type }}-{{ deployments[item.value.type].kernel | basename }}
# -initrd /tmp/{{ item.value.type }}-{{ deployments[item.value.type].initrd | basename }}
# -append "inst.stage2={{ item.value.stage2 | default(deployments[item.value.type].stage2) }}
# inst.repo={{ item.value.repo | default(deployments[item.value.type].repo) }}
# inst.ks={{ item.value.ks | default(deployments[item.value.type].ks) }}
# rd.noverifyssl net_cfg=#network --device=link --bootproto=

#        ostemplate: "local:vztmpl/{{ url_ostemplate | urlsplit('path') | basename }}"
#        password: "{{ root_password }}"
#        pubkey: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"



# Show the ID of the VM
- name: Mirá el número de la VM
  debug:
    var: virtualm

# Extract the ID of the VM
- name: Extraer el número de VM
  shell: qm list | grep "{{ proxmox_hostname }}" | awk '{ print $1 }'
  delegate_to: "{{ api_host }}"
  register: VMID
  when: virtualm is succeeded
  tags:
    - deploy

- debug:
    var: VMID
  tags:
    - deploy

# Turn on the container
#- name: Arrancar la virtual
#  proxmox_kvm:
#    node: "{{ node }}"
#    api_user: "{{ api_user }}"
#    api_host: "{{ api_host }}"
#    api_password: "{{ node_deploy_password }}"
#    vmid: "{{ VMID.stdout }}"
#    state: started
#  delegate_to: "{{ api_host }}"
#  when: (container is not defined) or (container is succeeded)
#  tags:
#    - deploy

# Waiting 15 seconds for the container to start
#- pause:
#    seconds: 15
#    prompt: "Esperando 15 segundos para que el contenedor arranque"
